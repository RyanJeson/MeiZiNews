package com.ms.greendaolibrary.db;

import com.ms.greendaolibrary.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "HTML_ENTITY".
 */
public class HtmlEntity {

    private Long id;
    private String url;
    private String type;
    private String title;
    private String html;
    private String summary;
    private String collect;
    private java.util.Date hireDate;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HtmlEntityDao myDao;

    private CollectEntity collectEntity;
    private Long collectEntity__resolvedKey;


    public HtmlEntity() {
    }

    public HtmlEntity(Long id) {
        this.id = id;
    }

    public HtmlEntity(Long id, String url, String type, String title, String html, String summary, String collect, java.util.Date hireDate) {
        this.id = id;
        this.url = url;
        this.type = type;
        this.title = title;
        this.html = html;
        this.summary = summary;
        this.collect = collect;
        this.hireDate = hireDate;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHtmlEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getHtml() {
        return html;
    }

    public void setHtml(String html) {
        this.html = html;
    }

    public String getSummary() {
        return summary;
    }

    public void setSummary(String summary) {
        this.summary = summary;
    }

    public String getCollect() {
        return collect;
    }

    public void setCollect(String collect) {
        this.collect = collect;
    }

    public java.util.Date getHireDate() {
        return hireDate;
    }

    public void setHireDate(java.util.Date hireDate) {
        this.hireDate = hireDate;
    }

    /** To-one relationship, resolved on first access. */
    public CollectEntity getCollectEntity() {
        Long __key = this.id;
        if (collectEntity__resolvedKey == null || !collectEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CollectEntityDao targetDao = daoSession.getCollectEntityDao();
            CollectEntity collectEntityNew = targetDao.load(__key);
            synchronized (this) {
                collectEntity = collectEntityNew;
            	collectEntity__resolvedKey = __key;
            }
        }
        return collectEntity;
    }

    public void setCollectEntity(CollectEntity collectEntity) {
        synchronized (this) {
            this.collectEntity = collectEntity;
            id = collectEntity == null ? null : collectEntity.getId();
            collectEntity__resolvedKey = id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
