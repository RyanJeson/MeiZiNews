package com.ms.greendaolibrary.db;

import com.ms.greendaolibrary.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "COLLECT_ENTITY".
 */
public class CollectEntity {

    private Long id;
    private Long html_id;
    private String collect;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CollectEntityDao myDao;

    private HtmlEntity htmlEntity;
    private Long htmlEntity__resolvedKey;


    public CollectEntity() {
    }

    public CollectEntity(Long id) {
        this.id = id;
    }

    public CollectEntity(Long id, Long html_id, String collect) {
        this.id = id;
        this.html_id = html_id;
        this.collect = collect;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCollectEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getHtml_id() {
        return html_id;
    }

    public void setHtml_id(Long html_id) {
        this.html_id = html_id;
    }

    public String getCollect() {
        return collect;
    }

    public void setCollect(String collect) {
        this.collect = collect;
    }

    /** To-one relationship, resolved on first access. */
    public HtmlEntity getHtmlEntity() {
        Long __key = this.html_id;
        if (htmlEntity__resolvedKey == null || !htmlEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HtmlEntityDao targetDao = daoSession.getHtmlEntityDao();
            HtmlEntity htmlEntityNew = targetDao.load(__key);
            synchronized (this) {
                htmlEntity = htmlEntityNew;
            	htmlEntity__resolvedKey = __key;
            }
        }
        return htmlEntity;
    }

    public void setHtmlEntity(HtmlEntity htmlEntity) {
        synchronized (this) {
            this.htmlEntity = htmlEntity;
            html_id = htmlEntity == null ? null : htmlEntity.getId();
            htmlEntity__resolvedKey = html_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
